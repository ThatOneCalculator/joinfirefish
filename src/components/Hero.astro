---
const { classes } = Astro.props;
---

<header id="hero" class={classes}>
	<slot name="banner"></slot>
	<div class="shape-container">
		<div class="shape"></div>
	</div>
	<div class="info">
		<slot></slot>
	</div>
	<div class="hero-content">
		<slot name="graphic"></slot>
	</div>
	<svg class="wave-bg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="currentColor" fill-opacity="1" d="M0,192L60,202.7C120,213,240,235,360,218.7C480,203,600,149,720,112C840,75,960,53,1080,42.7C1200,32,1320,32,1380,32L1440,32L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"></path></svg>
</header>
<style lang="stylus">
	.wave-bg
		position absolute
		// inset-inline -600px
		width 2000px
		height 600px
		bottom -170px
		margin-left 500px
		// left 200px
		color var(--bg)
		max-width unset
		transform scaleX(2)
		pointer-events none
		// margin-top 100px
		// filter drop-shadow(0 -60px 20px rgba(0,0,0,0.1))
		stroke var(--accent)
		stroke-width 2px
		stroke-dasharray 2000
		stroke-dashoffset -2000px
		stroke-linecap round
		animation strokeIn 2s both cubic-bezier(0,.5,0,1)
		z-index -1
		.themed &
			color var(--accent)
			z-index -1

	#hero
		position relative
		display flex
		justify-content center
		flex-wrap wrap
		align-items center
		color var(--infoFg)
		padding 60px 30px
		padding-top 15vh
		// min-height 80vh
		// margin-bottom 120px
		margin-inline -1000px
		padding-inline 1050px
		overflow hidden
		isolation isolate
		color var(--accent)
		background var(--X14)

		:global(.header)
			width 100%
			display flex
			align-items center
			flex-wrap wrap-reverse
			gap 1em

		&::before, &::after
			content ""
			position absolute
			inset 0
			width 20%
			background var(--bg)
			z-index 100
			mask linear-gradient(to right, var(--gradient))
			-webkit-mask @mask
		&::after
			left unset
			mask linear-gradient(to left, var(--gradient))
			-webkit-mask @mask
		.shape-container
			// content ""
			position absolute
			width 6000px
			// top 0
			bottom -5400px
			margin-top 100px
			margin-left 2500px
			height @width
			// transform rotate(60deg)
			z-index -2
			perspective 100px
			will-change transform
			animation slideLeft 2s .2s backwards cubic-bezier(0,0,0,1)
			.shape
				position absolute
				inset 0
				background var(--accent)
				box-shadow 0 0 80px -20px var(--accentTransparent)
				transform translateX( calc(12px * var(--pointerX)) ) translateY( calc(-12px * var(--pointerY)) ) rotate(60deg)

		:global(.banner)
			// margin-top -10vh
			// margin-bottom 3vh
			font-size .8em

	.logo
		width 350px

	.info
		position relative
		// flex-grow 1
		margin-right auto
		margin-bottom 100px
		pointer-events none
		width 23rem
		will-change transform
		// min-height 400px !important
		animation fadeIn 1s .4s backwards cubic-bezier(0,0,0,1)
		> :global(*)
			pointer-events all

		:global(h1)
			display inline
			font-size 2.5em
			// margin-block .5em
			// margin-bottom 1em
			line-height 1.5
			color var(--fg)
			text-shadow 0 4px 24px var(--accentTransparent)

		:global(h4)
			font-size 1.4em
			margin-bottom -.7em
			margin-top 1em
			// color var(--accentLighten)
		:global(p)
			font-weight 600
			font-size 1.2em
			color var(--fg)
		:global(> .button)
			margin-top 2.5em
			display block
			width max-content
		:global(> svg)
			display block
			margin-bottom 1.7em

	.hero-content
		pointer-events none
		max-width 100%
		min-height 300px
		width 42em
	.hero-content > :global(div)
		width 42em
		display flex
		flex-direction column
		align-items center
		position relative
		// padding-top 40px
		margin-top 40px
		max-width 100%
		pointer-events none
		max-width 100%

		> :global(.skeleton-container)
			position absolute
			width 950px
			z-index -1
			top -25px
			pointer-events all
			min-height 30em
			animation fadeIn 1s backwards cubic-bezier(0,0,0,1)
			@media (max-width 700px)
				display none
			// &::before
			// 	content ""
			// 	position absolute
			// 	inset -10px
			// 	border-radius var(--radius)
			// 	background var(--accent)
			// 	box-shadow 0 0 84px -30px var(--accentTransparent)
			// 	opacity .2
			// 	z-index -1
			// 	transform rotateY(calc(.8deg * var(--pointerX))) rotateX(calc(-.8deg * var(--pointerY)))
			> :global(.skeleton)
				// transform rotate3d(-1,1,0,-.5deg)
				transform rotateY(calc(.2deg * var(--pointerX))) rotateX(calc(-.2deg * var(--pointerY)))
		> :global(.fake-post)
			position relative
			z-index 3
			perspective 100px
			pointer-events all
			max-width calc(100% + 60px)
			contain layout
			// margin-top -20px
			// margin-bottom 20px
			animation fadeIn .4s backwards cubic-bezier(0,0,0,1)
			// animation slideLeft 1s 0s backwards cubic-bezier(0,0,0,1)
			:global(.posts-container)
				background none
				border-color transparent
				box-shadow none !important
				&::before
					content ""
					position absolute
					inset 0
					background var(--panel)
					z-index -1
					border-radius inherit
					border 1px solid var(--divider)
					transform rotateY(calc(.15deg * var(--pointerX))) rotateX(calc(-.15deg * var(--pointerY)))
				// :global(article)
				// 	filter drop-shadow(0 4px 8px rgba(0,0,0,.3))
				:global(.content)
					perspective 100px
				:global(.media)
					position relative
					margin-top 1em
					background none
					&::after
						content ""
						position absolute
						inset 0
						background var(--bg)
						z-index -1
						border-radius inherit
						transform rotateY(calc(.2deg * var(--pointerX))) rotateX(calc(-.2deg * var(--pointerY))) translate( calc( 2px * var(--pointerX) ), calc( 2px * var(--pointerY) ) )

	.centered
		text-align center
		flex-direction column
		padding-top 4vh !important

		.info
			position relative
			margin 0
			width unset
			display flex
			flex-direction column
			align-items center
			width 100%
			z-index 10
			// :global(h1)
			// 	max-width 20em !important
			:global(h1)
				// margin 0 !important
				margin-bottom 1em !important
			:global(p)
				white-space break-spaces
		:global(.header)
			padding-bottom 1em
			margin-bottom 5vh !important
			// border-bottom 2px solid var(--divider)
			align-items flex-end !important
		.hero-content > :global(div)
			// margin-top 10vh
			> :global(.skeleton-container)
				width 63em
				margin-top 50px
			:global(.posts-container)
				// margin-top -10px
				&::before
					box-shadow 0 10px 60px -20px rgba(0,0,0,0.2)

		.wave-bg
			bottom -120px
		.shape
			transform translateX( calc(12px * var(--pointerX)) ) translateY( calc(-12px * var(--pointerY)) ) rotate(-20deg) !important

		@media (max-width 700px)
			:global(.header)
				margin-bottom 0 !important
				justify-content center
				margin-top 4vh
				> :global(svg), > :global(.flex-grow)
					display none
			:global(h1)
				font-size 2em !important


	#hero:last-child:not(:first-of-type) // bottom of page
		// overflow visible !important
		// width 100vw
		// margin-inline -100vw
		margin-top -800px
		padding-top 1000px
		z-index -1
		background none
		mask linear-gradient(transparent, black)
		// mask linear-gradient(to top, var(--gradient))
		mask linear-gradient(to right, transparent, black 1000px calc(100% - 1000px), transparent)
		// mask radial-gradient(farthest-side at 50% 100%, black 50%, transparent)
		.info
			z-index 10
			padding-bottom 50px
		.shape
			transform translateX( calc(12px * var(--pointerX)) ) translateY( calc(-12px * var(--pointerY)) ) rotate(-20deg) !important

</style>
<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);

	const docEl = document.documentElement;

	gsap.matchMedia().add("(prefers-reduced-motion: no-preference)", () => {
		gsap.to("#hero:first-of-type .shape-container", {
			scrollTrigger: {
				trigger: "#hero",
				scrub: 1,
				start: "top 0"
			},
			y: -100,
		});
		
		gsap.matchMedia().add("(pointer: fine)", () => {
			const parallax = document.querySelectorAll(`
				#hero .skeleton-container,
				#hero .fake-post,
				#hero .shape-container
			`);
			document.addEventListener("pointermove", ({ x, y })=> {
				const boundX = gsap.utils.mapRange(0, window.innerWidth, -100, 100, x);
				const boundY = gsap.utils.mapRange(0, window.innerHeight, -100, 100, y);

				parallax.forEach((el) => {
					el.style.setProperty("--pointerX", (boundX / 100).toString());
					el.style.setProperty("--pointerY", (boundY / 100).toString());
				})
			});
		})
	})
</script>